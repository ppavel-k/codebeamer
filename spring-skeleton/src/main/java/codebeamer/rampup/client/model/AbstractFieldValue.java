

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;

/**
 * Value container of a field
 */
@JsonPropertyOrder({
  AbstractFieldValue.JSON_PROPERTY_FIELD_ID,
  AbstractFieldValue.JSON_PROPERTY_TYPE,
  AbstractFieldValue.JSON_PROPERTY_NAME
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BoolFieldValue.class, name = "BoolFieldValue"),
  @JsonSubTypes.Type(value = ChoiceFieldValue.class, name = "ChoiceFieldValue"),
  @JsonSubTypes.Type(value = ColorFieldValue.class, name = "ColorFieldValue"),
  @JsonSubTypes.Type(value = CountryFieldValue.class, name = "CountryFieldValue"),
  @JsonSubTypes.Type(value = DateFieldValue.class, name = "DateFieldValue"),
  @JsonSubTypes.Type(value = DecimalFieldValue.class, name = "DecimalFieldValue"),
  @JsonSubTypes.Type(value = DurationFieldValue.class, name = "DurationFieldValue"),
  @JsonSubTypes.Type(value = IntegerFieldValue.class, name = "IntegerFieldValue"),
  @JsonSubTypes.Type(value = LanguageFieldValue.class, name = "LanguageFieldValue"),
  @JsonSubTypes.Type(value = NotSupportedFieldValue.class, name = "NotSupportedFieldValue"),
  @JsonSubTypes.Type(value = ReferredTestStepFieldValue.class, name = "ReferredTestStepFieldValue"),
  @JsonSubTypes.Type(value = TableFieldValue.class, name = "TableFieldValue"),
  @JsonSubTypes.Type(value = TextFieldValue.class, name = "TextFieldValue"),
  @JsonSubTypes.Type(value = UrlFieldValue.class, name = "UrlFieldValue"),
  @JsonSubTypes.Type(value = WikiTextFieldValue.class, name = "WikiTextFieldValue"),
})

public class AbstractFieldValue {
  public static final String JSON_PROPERTY_FIELD_ID = "fieldId";
  private Integer fieldId;

  public static final String JSON_PROPERTY_TYPE = "type";
  protected String type;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public AbstractFieldValue() {
  }

  public AbstractFieldValue fieldId(Integer fieldId) {
    
    this.fieldId = fieldId;
    return this;
  }

   /**
   * Id of the field
   * @return fieldId
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_FIELD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFieldId() {
    return fieldId;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldId(Integer fieldId) {
    this.fieldId = fieldId;
  }


  public AbstractFieldValue type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the field
   * @return type
  **/
  @NonNull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public AbstractFieldValue name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the field
   * @return name
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractFieldValue abstractFieldValue = (AbstractFieldValue) o;
    return Objects.equals(this.fieldId, abstractFieldValue.fieldId) &&
        Objects.equals(this.type, abstractFieldValue.type) &&
        Objects.equals(this.name, abstractFieldValue.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldId, type, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractFieldValue {\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

