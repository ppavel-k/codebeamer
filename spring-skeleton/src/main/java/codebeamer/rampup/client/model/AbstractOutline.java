

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.springframework.lang.Nullable;

/**
 * Abstract outline entity
 */
@JsonPropertyOrder({
  AbstractOutline.JSON_PROPERTY_OUTLINE_INDEXES,
  AbstractOutline.JSON_PROPERTY_TYPE
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = OutlineItem.class, name = "OutlineItem"),
  @JsonSubTypes.Type(value = OutlineWiki.class, name = "OutlineWiki"),
})

public class AbstractOutline {
  public static final String JSON_PROPERTY_OUTLINE_INDEXES = "outlineIndexes";
  private List<OutlineIndex> outlineIndexes;

  public static final String JSON_PROPERTY_TYPE = "type";
  protected String type;

  public AbstractOutline() {
  }

  public AbstractOutline outlineIndexes(List<OutlineIndex> outlineIndexes) {
    
    this.outlineIndexes = outlineIndexes;
    return this;
  }

  public AbstractOutline addOutlineIndexesItem(OutlineIndex outlineIndexesItem) {
    if (this.outlineIndexes == null) {
      this.outlineIndexes = new ArrayList<>();
    }
    this.outlineIndexes.add(outlineIndexesItem);
    return this;
  }

   /**
   * Indexes of the entity in the outline.
   * @return outlineIndexes
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_OUTLINE_INDEXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OutlineIndex> getOutlineIndexes() {
    return outlineIndexes;
  }


  @JsonProperty(JSON_PROPERTY_OUTLINE_INDEXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutlineIndexes(List<OutlineIndex> outlineIndexes) {
    this.outlineIndexes = outlineIndexes;
  }


  public AbstractOutline type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the outline model
   * @return type
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractOutline abstractOutline = (AbstractOutline) o;
    return Objects.equals(this.outlineIndexes, abstractOutline.outlineIndexes) &&
        Objects.equals(this.type, abstractOutline.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outlineIndexes, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractOutline {\n");
    sb.append("    outlineIndexes: ").append(toIndentedString(outlineIndexes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

