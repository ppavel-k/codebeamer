

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.lang.Nullable;

/**
 * Reference to a field of a specific tracker
 */
@JsonPropertyOrder({
  FieldReference.JSON_PROPERTY_TRACKER_ID
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class FieldReference extends AbstractReference {
  public static final String JSON_PROPERTY_TRACKER_ID = "trackerId";
  private Integer trackerId;

  public FieldReference() {

  }

  public FieldReference trackerId(Integer trackerId) {
    
    this.trackerId = trackerId;
    return this;
  }

   /**
   * Id of the tracker
   * @return trackerId
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_TRACKER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTrackerId() {
    return trackerId;
  }


  @JsonProperty(JSON_PROPERTY_TRACKER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrackerId(Integer trackerId) {
    this.trackerId = trackerId;
  }

  @Override
  public FieldReference id(Integer id) {
    this.setId(id);
    return this;
  }

  @Override
  public FieldReference name(String name) {
    this.setName(name);
    return this;
  }

  @Override
  public FieldReference type(String type) {
    this.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldReference fieldReference = (FieldReference) o;
    return Objects.equals(this.trackerId, fieldReference.trackerId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trackerId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldReference {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    trackerId: ").append(toIndentedString(trackerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

