

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.lang.Nullable;

/**
 * Represents an outline item.
 */
@JsonPropertyOrder({
  OutlineItem.JSON_PROPERTY_ITEM_REFERENCE,
  OutlineItem.JSON_PROPERTY_HAS_CHILDREN
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class OutlineItem extends AbstractOutline {
  public static final String JSON_PROPERTY_ITEM_REFERENCE = "itemReference";
  private TrackerItemReference itemReference;

  public static final String JSON_PROPERTY_HAS_CHILDREN = "hasChildren";
  private Boolean hasChildren;

  public OutlineItem() {

  }

  public OutlineItem itemReference(TrackerItemReference itemReference) {
    
    this.itemReference = itemReference;
    return this;
  }

   /**
   * Get itemReference
   * @return itemReference
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_ITEM_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TrackerItemReference getItemReference() {
    return itemReference;
  }


  @JsonProperty(JSON_PROPERTY_ITEM_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemReference(TrackerItemReference itemReference) {
    this.itemReference = itemReference;
  }


  public OutlineItem hasChildren(Boolean hasChildren) {
    
    this.hasChildren = hasChildren;
    return this;
  }

   /**
   * Indicator if the item has child items.
   * @return hasChildren
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_HAS_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasChildren() {
    return hasChildren;
  }


  @JsonProperty(JSON_PROPERTY_HAS_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }

  @Override
  public OutlineItem outlineIndexes(List<OutlineIndex> outlineIndexes) {
    this.setOutlineIndexes(outlineIndexes);
    return this;
  }

  @Override
  public OutlineItem type(String type) {
    this.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutlineItem outlineItem = (OutlineItem) o;
    return Objects.equals(this.itemReference, outlineItem.itemReference) &&
        Objects.equals(this.hasChildren, outlineItem.hasChildren) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemReference, hasChildren, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutlineItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    itemReference: ").append(toIndentedString(itemReference)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

