

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.springframework.lang.Nullable;

/**
 * Decimal field
 */
@JsonPropertyOrder({
  DecimalField.JSON_PROPERTY_MIN,
  DecimalField.JSON_PROPERTY_MAX
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class DecimalField extends AbstractField {
  public static final String JSON_PROPERTY_MIN = "min";
  private Double min;

  public static final String JSON_PROPERTY_MAX = "max";
  private Double max;

  public DecimalField() {

  }

  public DecimalField min(Double min) {
    
    this.min = min;
    return this;
  }

   /**
   * Minimum value of a field
   * @return min
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMin() {
    return min;
  }


  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMin(Double min) {
    this.min = min;
  }


  public DecimalField max(Double max) {
    
    this.max = max;
    return this;
  }

   /**
   * Maximum value of a field
   * @return max
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMax() {
    return max;
  }


  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMax(Double max) {
    this.max = max;
  }

  @Override
  public DecimalField id(Integer id) {
    this.setId(id);
    return this;
  }

  @Override
  public DecimalField name(String name) {
    this.setName(name);
    return this;
  }

  @Override
  public DecimalField description(String description) {
    this.setDescription(description);
    return this;
  }

  @Override
  public DecimalField type(String type) {
    this.setType(type);
    return this;
  }

  @Override
  public DecimalField hidden(Boolean hidden) {
    this.setHidden(hidden);
    return this;
  }

  @Override
  public DecimalField valueModel(String valueModel) {
    this.setValueModel(valueModel);
    return this;
  }

  @Override
  public DecimalField title(String title) {
    this.setTitle(title);
    return this;
  }

  @Override
  public DecimalField legacyRestName(String legacyRestName) {
    this.setLegacyRestName(legacyRestName);
    return this;
  }

  @Override
  public DecimalField trackerItemField(String trackerItemField) {
    this.setTrackerItemField(trackerItemField);
    return this;
  }

  @Override
  public DecimalField mandatoryInStatuses(List<ChoiceOptionReference> mandatoryInStatuses) {
    this.setMandatoryInStatuses(mandatoryInStatuses);
    return this;
  }

  @Override
  public DecimalField formula(String formula) {
    this.setFormula(formula);
    return this;
  }

  @Override
  public DecimalField hideIfDependencyFormula(String hideIfDependencyFormula) {
    this.setHideIfDependencyFormula(hideIfDependencyFormula);
    return this;
  }

  @Override
  public DecimalField mandatoryIfDependencyFormula(String mandatoryIfDependencyFormula) {
    this.setMandatoryIfDependencyFormula(mandatoryIfDependencyFormula);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecimalField decimalField = (DecimalField) o;
    return Objects.equals(this.min, decimalField.min) &&
        Objects.equals(this.max, decimalField.max) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(min, max, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecimalField {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

