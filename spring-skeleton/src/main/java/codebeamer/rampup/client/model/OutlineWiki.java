

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.lang.Nullable;

/**
 * A model created for wiki page outline models
 */
@JsonPropertyOrder({
  OutlineWiki.JSON_PROPERTY_WIKI_PAGE_REFERENCE_MODEL
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class OutlineWiki extends AbstractOutline {
  public static final String JSON_PROPERTY_WIKI_PAGE_REFERENCE_MODEL = "wikiPageReferenceModel";
  private WikiPageReference wikiPageReferenceModel;

  public OutlineWiki() {

  }

  public OutlineWiki wikiPageReferenceModel(WikiPageReference wikiPageReferenceModel) {
    
    this.wikiPageReferenceModel = wikiPageReferenceModel;
    return this;
  }

   /**
   * Get wikiPageReferenceModel
   * @return wikiPageReferenceModel
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_WIKI_PAGE_REFERENCE_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WikiPageReference getWikiPageReferenceModel() {
    return wikiPageReferenceModel;
  }


  @JsonProperty(JSON_PROPERTY_WIKI_PAGE_REFERENCE_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWikiPageReferenceModel(WikiPageReference wikiPageReferenceModel) {
    this.wikiPageReferenceModel = wikiPageReferenceModel;
  }

  @Override
  public OutlineWiki outlineIndexes(List<OutlineIndex> outlineIndexes) {
    this.setOutlineIndexes(outlineIndexes);
    return this;
  }

  @Override
  public OutlineWiki type(String type) {
    this.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutlineWiki outlineWiki = (OutlineWiki) o;
    return Objects.equals(this.wikiPageReferenceModel, outlineWiki.wikiPageReferenceModel) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(wikiPageReferenceModel, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutlineWiki {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    wikiPageReferenceModel: ").append(toIndentedString(wikiPageReferenceModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

