

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.springframework.lang.Nullable;

/**
 * ReportGroup having rows.
 */
@JsonPropertyOrder({
  ReportGroupWithRows.JSON_PROPERTY_ROWS
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class ReportGroupWithRows extends ReportGroup {
  public static final String JSON_PROPERTY_ROWS = "rows";
  private List<ReportRow> rows;

  public ReportGroupWithRows() {

  }

  public ReportGroupWithRows rows(List<ReportRow> rows) {
    
    this.rows = rows;
    return this;
  }

  public ReportGroupWithRows addRowsItem(ReportRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Get rows
   * @return rows
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ReportRow> getRows() {
    return rows;
  }


  @JsonProperty(JSON_PROPERTY_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRows(List<ReportRow> rows) {
    this.rows = rows;
  }

  @Override
  public ReportGroupWithRows type(String type) {
    this.setType(type);
    return this;
  }

  @Override
  public ReportGroupWithRows header(String header) {
    this.setHeader(header);
    return this;
  }

  @Override
  public ReportGroupWithRows groupingValue(String groupingValue) {
    this.setGroupingValue(groupingValue);
    return this;
  }

  @Override
  public ReportGroupWithRows groupingValueId(Integer groupingValueId) {
    this.setGroupingValueId(groupingValueId);
    return this;
  }

  @Override
  public ReportGroupWithRows count(Double count) {
    this.setCount(count);
    return this;
  }

  @Override
  public ReportGroupWithRows aggregates(List<ReportAggregate> aggregates) {
    this.setAggregates(aggregates);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportGroupWithRows reportGroupWithRows = (ReportGroupWithRows) o;
    return Objects.equals(this.rows, reportGroupWithRows.rows) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rows, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportGroupWithRows {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

