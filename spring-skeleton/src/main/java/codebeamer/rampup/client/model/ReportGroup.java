

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.springframework.lang.Nullable;

/**
 * A report group which can contain rows or other groups based on the type.
 */
@JsonPropertyOrder({
  ReportGroup.JSON_PROPERTY_TYPE,
  ReportGroup.JSON_PROPERTY_HEADER,
  ReportGroup.JSON_PROPERTY_GROUPING_VALUE,
  ReportGroup.JSON_PROPERTY_GROUPING_VALUE_ID,
  ReportGroup.JSON_PROPERTY_COUNT,
  ReportGroup.JSON_PROPERTY_AGGREGATES
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ReportGroupWithGroups.class, name = "ReportGroupWithGroups"),
  @JsonSubTypes.Type(value = ReportGroupWithReferencedRows.class, name = "ReportGroupWithReferencedRows"),
  @JsonSubTypes.Type(value = ReportGroupWithRows.class, name = "ReportGroupWithRows"),
})

public class ReportGroup {
  public static final String JSON_PROPERTY_TYPE = "type";
  protected String type;

  public static final String JSON_PROPERTY_HEADER = "header";
  private String header;

  public static final String JSON_PROPERTY_GROUPING_VALUE = "groupingValue";
  private String groupingValue;

  public static final String JSON_PROPERTY_GROUPING_VALUE_ID = "groupingValueId";
  private Integer groupingValueId;

  public static final String JSON_PROPERTY_COUNT = "count";
  private Double count;

  public static final String JSON_PROPERTY_AGGREGATES = "aggregates";
  private List<ReportAggregate> aggregates;

  public ReportGroup() {
  }

  public ReportGroup type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the group.
   * @return type
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public ReportGroup header(String header) {
    
    this.header = header;
    return this;
  }

   /**
   * Grouping header
   * @return header
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHeader() {
    return header;
  }


  @JsonProperty(JSON_PROPERTY_HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeader(String header) {
    this.header = header;
  }


  public ReportGroup groupingValue(String groupingValue) {
    
    this.groupingValue = groupingValue;
    return this;
  }

   /**
   * The common value in the group, , if it&#39;s available
   * @return groupingValue
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_GROUPING_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroupingValue() {
    return groupingValue;
  }


  @JsonProperty(JSON_PROPERTY_GROUPING_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupingValue(String groupingValue) {
    this.groupingValue = groupingValue;
  }


  public ReportGroup groupingValueId(Integer groupingValueId) {
    
    this.groupingValueId = groupingValueId;
    return this;
  }

   /**
   * The id of the common value in the group, if it&#39;s available
   * @return groupingValueId
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_GROUPING_VALUE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGroupingValueId() {
    return groupingValueId;
  }


  @JsonProperty(JSON_PROPERTY_GROUPING_VALUE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupingValueId(Integer groupingValueId) {
    this.groupingValueId = groupingValueId;
  }


  public ReportGroup count(Double count) {
    
    this.count = count;
    return this;
  }

   /**
   * Number of items in the group, if it has subgroups then the aggregated number of items.
   * @return count
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(Double count) {
    this.count = count;
  }


  public ReportGroup aggregates(List<ReportAggregate> aggregates) {
    
    this.aggregates = aggregates;
    return this;
  }

  public ReportGroup addAggregatesItem(ReportAggregate aggregatesItem) {
    if (this.aggregates == null) {
      this.aggregates = new ArrayList<>();
    }
    this.aggregates.add(aggregatesItem);
    return this;
  }

   /**
   * List of the aggregate values with column id.
   * @return aggregates
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_AGGREGATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ReportAggregate> getAggregates() {
    return aggregates;
  }


  @JsonProperty(JSON_PROPERTY_AGGREGATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAggregates(List<ReportAggregate> aggregates) {
    this.aggregates = aggregates;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportGroup reportGroup = (ReportGroup) o;
    return Objects.equals(this.type, reportGroup.type) &&
        Objects.equals(this.header, reportGroup.header) &&
        Objects.equals(this.groupingValue, reportGroup.groupingValue) &&
        Objects.equals(this.groupingValueId, reportGroup.groupingValueId) &&
        Objects.equals(this.count, reportGroup.count) &&
        Objects.equals(this.aggregates, reportGroup.aggregates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, header, groupingValue, groupingValueId, count, aggregates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportGroup {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    groupingValue: ").append(toIndentedString(groupingValue)).append("\n");
    sb.append("    groupingValueId: ").append(toIndentedString(groupingValueId)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    aggregates: ").append(toIndentedString(aggregates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

