

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;

/**
 * Value container of a referred test step
 */
@JsonPropertyOrder({
  ReferredTestStepFieldValue.JSON_PROPERTY_REFERRED_STEP_ID,
  ReferredTestStepFieldValue.JSON_PROPERTY_REFERRED_TEST_CASE_ID,
  ReferredTestStepFieldValue.JSON_PROPERTY_VALUE
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class ReferredTestStepFieldValue extends AbstractFieldValue {
  public static final String JSON_PROPERTY_REFERRED_STEP_ID = "referredStepId";
  private String referredStepId;

  public static final String JSON_PROPERTY_REFERRED_TEST_CASE_ID = "referredTestCaseId";
  private Integer referredTestCaseId;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public ReferredTestStepFieldValue() {

  }

  public ReferredTestStepFieldValue referredStepId(String referredStepId) {
    
    this.referredStepId = referredStepId;
    return this;
  }

   /**
   * Id of the referred test step
   * @return referredStepId
  **/
  @NonNull
  @JsonProperty(JSON_PROPERTY_REFERRED_STEP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReferredStepId() {
    return referredStepId;
  }


  @JsonProperty(JSON_PROPERTY_REFERRED_STEP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferredStepId(String referredStepId) {
    this.referredStepId = referredStepId;
  }


  public ReferredTestStepFieldValue referredTestCaseId(Integer referredTestCaseId) {
    
    this.referredTestCaseId = referredTestCaseId;
    return this;
  }

   /**
   * Id of the test case where the referred test step comes
   * @return referredTestCaseId
  **/
  @NonNull
  @JsonProperty(JSON_PROPERTY_REFERRED_TEST_CASE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getReferredTestCaseId() {
    return referredTestCaseId;
  }


  @JsonProperty(JSON_PROPERTY_REFERRED_TEST_CASE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferredTestCaseId(Integer referredTestCaseId) {
    this.referredTestCaseId = referredTestCaseId;
  }


  public ReferredTestStepFieldValue value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Id of the Test Step
   * @return value
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(String value) {
    this.value = value;
  }

  @Override
  public ReferredTestStepFieldValue fieldId(Integer fieldId) {
    this.setFieldId(fieldId);
    return this;
  }

  @Override
  public ReferredTestStepFieldValue type(String type) {
    this.setType(type);
    return this;
  }

  @Override
  public ReferredTestStepFieldValue name(String name) {
    this.setName(name);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferredTestStepFieldValue referredTestStepFieldValue = (ReferredTestStepFieldValue) o;
    return Objects.equals(this.referredStepId, referredTestStepFieldValue.referredStepId) &&
        Objects.equals(this.referredTestCaseId, referredTestStepFieldValue.referredTestCaseId) &&
        Objects.equals(this.value, referredTestStepFieldValue.value) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referredStepId, referredTestCaseId, value, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferredTestStepFieldValue {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    referredStepId: ").append(toIndentedString(referredStepId)).append("\n");
    sb.append("    referredTestCaseId: ").append(toIndentedString(referredTestCaseId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

