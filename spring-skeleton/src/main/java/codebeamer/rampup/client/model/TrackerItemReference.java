

package codebeamer.rampup.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.springframework.lang.Nullable;

/**
 * Reference to a tracker item
 */
@JsonPropertyOrder({
  TrackerItemReference.JSON_PROPERTY_REFERENCE_DATA
})
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class TrackerItemReference extends AbstractReference {
  public static final String JSON_PROPERTY_REFERENCE_DATA = "referenceData";
  private TrackerItemReferenceData referenceData;

  public TrackerItemReference() {

  }

  public TrackerItemReference referenceData(TrackerItemReferenceData referenceData) {
    
    this.referenceData = referenceData;
    return this;
  }

   /**
   * Get referenceData
   * @return referenceData
  **/
  @Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TrackerItemReferenceData getReferenceData() {
    return referenceData;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferenceData(TrackerItemReferenceData referenceData) {
    this.referenceData = referenceData;
  }

  @Override
  public TrackerItemReference id(Integer id) {
    this.setId(id);
    return this;
  }

  @Override
  public TrackerItemReference name(String name) {
    this.setName(name);
    return this;
  }

  @Override
  public TrackerItemReference type(String type) {
    this.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackerItemReference trackerItemReference = (TrackerItemReference) o;
    return Objects.equals(this.referenceData, trackerItemReference.referenceData) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceData, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackerItemReference {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    referenceData: ").append(toIndentedString(referenceData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

